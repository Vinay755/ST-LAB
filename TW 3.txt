3. Design and develop a program in a language of your choice to solve the triangle problem defined as follows: Accept three integers which are supposed to be the three sides of a triangle and determine if the three values represent an equilateral triangle, isosceles triangle, scalene triangle, or they do not form a triangle at all. Assume that the upper limit for the size of any side is 10. Derive test cases for your program based on equivalence class partitioning, execute the test cases and discuss the results. 
 
ALGORITHM: 
 
Step 1: Input a, b & c i.e three integer values which represent three sides of the triangle. 
 
Step 2: if (a < (b + c)) and (b < (a + c)) and (c < (a + b) then do step 3 
else print not a triangle. do step 6. 
 
Step 3: if (a=b) and (b=c) then 
Print triangle formed is equilateral. do step 6. 
 
Step 4: if (a ≠ b) and (a ≠ c) and (b ≠ c) then Print triangle formed is scalene. do step 6. 
 
Step 5: Print triangle formed is Isosceles. 
 
Step 6: stop 
#include<stdio.h>
int main()
{
int a,b,c,c1,c2,c3,c12,c13,c14,c15,c16,c22,c23,c24,c25,c26,c32,c33,c34,c35,c36;
char istriangle;
do
{
printf("\nEnter 3 integers which are sides of Triangle\n");
scanf("%d%d%d",&a,&b,&c);
printf("\na=%d\tb=%d\tc=%d",a,b,c);
c1 = a>=1 && a<=10;
c12 = a<1;
c13 = a>=1 && a<5;
c14 = a>5 && a<=10;
c15 = a==5;
c16 = a>10;

c2= b>=1 && b<=10;
c22 = b<1;
c23 = b>=1 && b<5;
c24 = b>5 && b<=10;
c25 = b==5;
c26 = b>10;

c3= c>=1 && c<=10;
c32 = c<1;
c33 = c>=1 && c<5;
c34 = c>5 && c<=10;
c35 = c==5;
c36 = c>10;

if (c12 || c16 && c22 || c26 && c32 || c36 )
{
    printf("\nValues are Totally Robust and Triangle can't be Formed");
    exit(0);

}
if(c13 && c23 || c23 && c33 || c33 && c23)
{
      printf("\nValues are Weak Normal Values");
}
else if(c15 && c25 && c35)
{
    printf("\nValues Are Normal Values");
}
else printf("\nValues Are Strong Normal Values");

} while(!(c1 && c2 && c3));
// To check is it a triangle or not
if( a<b+c && b<a+c && c<a+b )
istriangle='y';
else
istriangle ='n';
// To check which type of triangle
if(((a+b)>c)&&((b+c)>a)&&((c+a)>b))
    {

      if((a==b)&&(b==c))
          printf("\nIt is an Equilateral Triangle");
    else if((a==b)||(b==c)||(c==a))
        printf("\nIt is an Isosceles Triangle");
          else
              printf("\nIt is a Scalene Triangle");

    }
    else
    printf("\nTriangle Can't be Formed");

return 0;
}

 
TEST CASE 1  :
Enter 3 integers which are sides of triangle
6 6 2
a=6  b=6  c=2
Values Are Strong Normal Values
It is an Isosceles Triangle

TEST CASE 2  :
Enter 3 integers which are sides of triangle
5 5 5
a=5  b=5  c=5
Values Are Normal Values
It is an Equilateral Triangle

TEST CASE 3 :
Enter 3 integers which are sides of triangle
10 9 5
a=10  b=9  c=5
Values Are Strong Normal Values
It is an Scalene Triangle

TEST CASE 4:
Enter 3 integers which are sides of triangle
8 4 4
a=8  b=4  c=4
Values Are Weak Normal Values
Triangle Can’t be Formed

TEST CASE 5 :
Enter 3 integers which are sides of triangle
-1  4  11
a=-1  b=4  c=11
Values Are Totally Robust and Triangle can’t be Formed
Process returned 0 ( 0x0 ) execution time : 8.920 s


